import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

void main() {
  runApp(const AKCustomRigsApp());
}

const String SCRIPT_URL = "https://script.google.com/macros/s/XXXX/exec"; // <-- REPLACE ME

final currency = NumberFormat.currency(locale: 'en_IN', symbol: '₹');

class AKCustomRigsApp extends StatelessWidget {
  const AKCustomRigsApp({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = ThemeData.dark().copyWith(
      scaffoldBackgroundColor: const Color(0xFF0F0F10),
      colorScheme: const ColorScheme.dark(
        primary: Color(0xFFD00000),
        secondary: Color(0xFFFF3333),
      ),
      textTheme: ThemeData.dark().textTheme.apply(
            bodyColor: Colors.white,
            displayColor: Colors.white,
          ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: const Color(0xFF151517),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF333336)),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF333336)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFFFF2D2D)),
        ),
      ),
    );

    return MaterialApp(
      title: 'AK Custom Rigs',
      debugShowCheckedModeBanner: false,
      theme: theme,
      home: const BuilderScreen(),
    );
  }
}

class PartOption {
  final String id;
  final String name;
  final int price;
  const PartOption(this.id, this.name, this.price);
}

class BuilderScreen extends StatefulWidget {
  const BuilderScreen({super.key});

  @override
  State<BuilderScreen> createState() => _BuilderScreenState();
}

class _BuilderScreenState extends State<BuilderScreen> {
  // Parts catalog
  final cpus = const [
    PartOption('i3-12100', 'Intel i3-12100', 8000),
    PartOption('i5-12400', 'Intel i5-12400', 14000),
    PartOption('r5-5600', 'AMD Ryzen 5 5600', 15000),
  ];
  final gpus = const [
    PartOption('gtx1650', 'NVIDIA GTX 1650 4GB', 12000),
    PartOption('rtx3050', 'NVIDIA RTX 3050 8GB', 22000),
    PartOption('rx6600', 'AMD RX 6600 8GB', 21000),
  ];
  final rams = const [
    PartOption('8gb', '8GB DDR4', 2500),
    PartOption('16gb', '16GB DDR4 (2x8)', 4800),
    PartOption('32gb', '32GB DDR4 (2x16)', 9000),
  ];
  final storages = const [
    PartOption('ssd256', 'SSD 256GB', 2000),
    PartOption('ssd512', 'SSD 512GB', 3200),
    PartOption('hdd1tb', 'HDD 1TB', 2500),
  ];
  final psus = const [
    PartOption('450w', '450W Bronze', 2500),
    PartOption('650w', '650W Gold', 4500),
  ];
  final cases = const [
    PartOption('matx', 'mATX Case (RGB)', 3500),
    PartOption('atx', 'ATX Mid Tower', 4500),
  ];

  // Selected parts
  PartOption? selCpu;
  PartOption? selGpu;
  PartOption? selRam;
  PartOption? selStorage;
  PartOption? selPsu;
  PartOption? selCase;
  int qty = 1;

  // Cart (each item is a Map with title/qty/ppu)
  final List<Map<String, dynamic>> cart = [];

  // Customer info
  final nameCtrl = TextEditingController();
  final emailCtrl = TextEditingController();
  final phoneCtrl = TextEditingController();
  final addressCtrl = TextEditingController();

  bool sending = false;

  @override
  void initState() {
    super.initState();
    selCpu = cpus[1];
    selGpu = gpus[0];
    selRam = rams[1];
    selStorage = storages[1];
    selPsu = psus[0];
    selCase = cases[1];
  }

  int _currentBuildUnitPrice() {
    final parts = [selCpu, selGpu, selRam, selStorage, selPsu, selCase];
    return parts.fold<int>(0, (sum, p) => sum + (p?.price ?? 0));
  }

  int _currentBuildTotal() {
    return _currentBuildUnitPrice() * (qty <= 0 ? 1 : qty);
    }

  void _addBuildToCart() {
    final unit = _currentBuildUnitPrice();
    final item = {
      'id': DateTime.now().millisecondsSinceEpoch.toString(),
      'title': 'Custom: ${selCpu!.name} / ${selGpu!.name}',
      'qty': qty <= 0 ? 1 : qty,
      'pricePerUnit': unit,
      'parts': {
        'CPU': selCpu!.name,
        'GPU': selGpu!.name,
        'RAM': selRam!.name,
        'Storage': selStorage!.name,
        'PSU': selPsu!.name,
        'Case': selCase!.name,
      }
    };
    setState(() => cart.add(item));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Added to cart • ${currency.format(unit)}')),
    );
  }

  int get subtotal =>
      cart.fold(0, (s, it) => s + (it['pricePerUnit'] as int) * (it['qty'] as int));
  int get tax => (subtotal * 0.18).round(); // 18% GST
  int get total => subtotal + tax;

  void _removeCartItem(String id) {
    setState(() => cart.removeWhere((x) => x['id'] == id));
  }

  Future<void> _placeOrder() async {
    if (cart.isEmpty) {
      _dialog('Cart is empty', 'Please add at least one build.');
      return;
    }
    if (nameCtrl.text.trim().isEmpty ||
        emailCtrl.text.trim().isEmpty ||
        phoneCtrl.text.trim().isEmpty ||
        addressCtrl.text.trim().isEmpty) {
      _dialog('Missing details', 'Please fill Name, Email, Phone, and Address.');
      return;
    }

    final summaryLines = <String>[];
    for (final it in cart) {
      final qty = it['qty'] as int;
      final ppu = it['pricePerUnit'] as int;
      summaryLines.add(
          "${it['title']} x$qty — ${currency.format(ppu * qty)}");
      final parts = (it['parts'] as Map<String, dynamic>);
      parts.forEach((k, v) {
        summaryLines.add(" • $k: $v");
      });
    }
    summaryLines.add("Subtotal: ${currency.format(subtotal)}");
    summaryLines.add("Tax (18%): ${currency.format(tax)}");
    summaryLines.add("Total: ${currency.format(total)}");

    final payload = {
      "name": nameCtrl.text.trim(),
      "email": emailCtrl.text.trim(),
      "phone": phoneCtrl.text.trim(),
      "address": addressCtrl.text.trim(),
      "order": summaryLines.join("\n"),
    };

    setState(() => sending = true);
    try {
      final res = await http.post(
        Uri.parse(SCRIPT_URL),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode(payload),
      );

      if (res.statusCode == 200) {
        await _dialog('Order placed ✅',
            'Your order has been sent. We’ll contact you shortly.\nOrder Total: ${currency.format(total)}');
        setState(() {
          cart.clear();
          qty = 1;
        });
      } else {
        await _dialog('Send failed',
            'Server replied with status ${res.statusCode}.\nResponse: ${res.body}');
      }
    } catch (e) {
      await _dialog('Network error', e.toString());
    } finally {
      if (mounted) setState(() => sending = false);
    }
  }

  Future<void> _dialog(String title, String message) async {
    return showDialog<void>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF1A1B1E),
        title: Text(title, style: const TextStyle(color: Colors.white)),
        content: Text(message, style: const TextStyle(color: Colors.white70)),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: const Text('OK'),
          )
        ],
      ),
    );
  }

  Widget _panel({required String title, required Widget child}) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF151517),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFF2B2B30)),
        boxShadow: const [
          BoxShadow(color: Colors.black54, blurRadius: 14, offset: Offset(0, 6)),
        ],
      ),
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        Row(
          children: [
            Container(
              height: 28,
              width: 6,
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFD00000), Color(0xFFFF3333)],
                ),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            const SizedBox(width: 10),
            Text(title,
                style: const TextStyle(
                    fontSize: 18, fontWeight: FontWeight.w700)),
          ],
        ),
        const SizedBox(height: 14),
        child
      ]),
    );
  }

  @override
  Widget build(BuildContext context) {
    final appBar = AppBar(
      elevation: 0,
      title: const Text('AK Custom Rigs — PC Builder'),
      centerTitle: true,
      flexibleSpace: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFD00000), Color(0xFF5A0000)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
      ),
    );

    return Scaffold(
      appBar: appBar,
      body: LayoutBuilder(
        builder: (context, c) {
          final wide = c.maxWidth > 900;
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // Configurator + Cart row
                Flex(
                  direction: wide ? Axis.horizontal : Axis.vertical,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Configurator
                    Expanded(
                      flex: wide ? 2 : 0,
                      child: _panel(
                        title: 'Configurator',
                        child: Column(
                          children: [
                            _dropdown('CPU', cpus, selCpu, (v) => setState(() => selCpu = v)),
                            const SizedBox(height: 10),
                            _dropdown('GPU', gpus, selGpu, (v) => setState(() => selGpu = v)),
                            const SizedBox(height: 10),
                            _dropdown('RAM', rams, selRam, (v) => setState(() => selRam = v)),
                            const SizedBox(height: 10),
                            _dropdown('Storage', storages, selStorage, (v) => setState(() => selStorage = v)),
                            const SizedBox(height: 10),
                            _dropdown('PSU', psus, selPsu, (v) => setState(() => selPsu = v)),
                            const SizedBox(height: 10),
                            _dropdown('Case', cases, selCase, (v) => setState(() => selCase = v)),
                            const SizedBox(height: 12),
                            Row(
                              children: [
                                Expanded(
                                  child: TextField(
                                    keyboardType: TextInputType.number,
                                    decoration: const InputDecoration(
                                      labelText: 'Quantity',
                                    ),
                                    controller: TextEditingController(text: qty.toString()),
                                    onChanged: (v) {
                                      final n = int.tryParse(v) ?? 1;
                                      setState(() => qty = n.clamp(1, 999));
                                    },
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: _priceBox(
                                      'Est. Price',
                                      _currentBuildTotal()),
                                ),
                              ],
                            ),
                            const SizedBox(height: 14),
                            SizedBox(
                              width: double.infinity,
                              child: ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  padding: const EdgeInsets.symmetric(vertical: 14),
                                  backgroundColor: const Color(0xFFD00000),
                                  foregroundColor: Colors.white,
                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                ),
                                onPressed: _addBuildToCart,
                                child: const Text('Add Build to Cart'),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    if (wide) const SizedBox(width: 16) else const SizedBox(height: 16),
                    // Cart
                    Expanded(
                      flex: 1,
                      child: _panel(
                        title: 'Cart',
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            if (cart.isEmpty)
                              const Text('Cart is empty', style: TextStyle(color: Colors.white70)),
                            if (cart.isNotEmpty)
                              ...cart.map((it) => _cartTile(it)).toList(),
                            const Divider(height: 24),
                            _kv('Subtotal', currency.format(subtotal)),
                            _kv('Tax (18%)', currency.format(tax)),
                            _kvBold('Total', currency.format(total)),
                            const SizedBox(height: 8),
                            Row(
                              children: [
                                Expanded(
                                  child: OutlinedButton(
                                    onPressed: cart.isEmpty ? null : () => setState(() => cart.clear()),
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(color: Color(0xFF444449)),
                                      foregroundColor: Colors.white70,
                                    ),
                                    child: const Text('Clear Cart'),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 16),

                // Checkout
                _panel(
                  title: 'Checkout & Billing',
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Expanded(child: _text('Full Name', nameCtrl)),
                          const SizedBox(width: 12),
                          Expanded(child: _text('Email', emailCtrl, type: TextInputType.emailAddress)),
                        ],
                      ),
                      const SizedBox(height: 10),
                      Row(
                        children: [
                          Expanded(child: _text('Phone', phoneCtrl, type: TextInputType.phone)),
                        ],
                      ),
                      const SizedBox(height: 10),
                      _multiline('Address', addressCtrl),
                      const SizedBox(height: 14),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            backgroundColor: const Color(0xFFFF3333),
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                          ),
                          onPressed: sending ? null : _placeOrder,
                          icon: sending
                              ? const SizedBox(
                                  height: 18,
                                  width: 18,
                                  child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                                )
                              : const Icon(Icons.send),
                          label: Text(sending ? 'Sending...' : 'Place Order'),
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 20),
                Text('© ${DateTime.now().year} AK Custom Rigs — Demo App',
                    style: const TextStyle(color: Colors.white54, fontSize: 12)),
                const SizedBox(height: 30),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _dropdown(
    String label,
    List<PartOption> options,
    PartOption? selected,
    void Function(PartOption?) onChanged,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _fieldLabel(label),
        const SizedBox(height: 6),
        DropdownButtonFormField<PartOption>(
          value: selected,
          decoration: const InputDecoration(),
          dropdownColor: const Color(0xFF151517),
          iconEnabledColor: Colors.white,
          items: options
              .map((p) => DropdownMenuItem(
                    value: p,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Flexible(child: Text(p.name)),
                        const SizedBox(width: 12),
                        Text(currency.format(p.price),
                            style: const TextStyle(color: Colors.white70)),
                      ],
                    ),
                  ))
              .toList(),
          onChanged: onChanged,
        ),
      ],
    );
  }

  Widget _priceBox(String label, int amount) {
    return Container(
      padding: const EdgeInsets.all(14),
      decoration: BoxDecoration(
        color: const Color(0xFF101013),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2B2B30)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label,
              style:
                  const TextStyle(fontSize: 12, color: Colors.white70)),
          const SizedBox(height: 6),
          Text(currency.format(amount),
              style: const TextStyle(
                  fontSize: 18, fontWeight: FontWeight.w700, color: Colors.white)),
        ],
      ),
    );
  }

  Widget _cartTile(Map<String, dynamic> it) {
    final qty = it['qty'] as int;
    final ppu = it['pricePerUnit'] as int;
    final total = ppu * qty;
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFF101013),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFF2B2B30)),
      ),
      child: Row(
        children: [
          Expanded(
            child: Text(
              it['title'],
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ),
          const SizedBox(width: 8),
          Text('x$qty  •  ${currency.format(total)}',
              style: const TextStyle(color: Colors.white70)),
          IconButton(
            onPressed: () => _removeCartItem(it['id'] as String),
            icon: co
